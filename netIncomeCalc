<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Net Tax Income Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 flex items-center justify-center min-h-screen">
    <div class="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h1 class="text-2xl font-bold mb-6 text-center text-white">Net Tax Income Calculator</h1>
        <div id="geolocationError" class="hidden text-sm text-red-400 text-center mb-4">
            Unable to detect location. Defaulting to California.
        </div>
        <div class="space-y-4">
            <div>
                <label for="payType" class="block text-sm font-medium text-gray-300">Pay Type</label>
                <select id="payType" class="mt-1 block w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white">
                    <option value="salary">Salary</option>
                    <option value="hourly">Hourly</option>
                </select>
            </div>
            <div id="salaryInput" class="space-y-2">
                <label for="grossPay" class="block text-sm font-medium text-gray-300">Annual Gross Pay ($)</label>
                <input type="number" id="grossPay" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white" placeholder="e.g., 50000">
            </div>
            <div id="hourlyInput" class="space-y-2 hidden">
                <label for="hourlyRate" class="block text-sm font-medium text-gray-300">Hourly Rate ($)</label>
                <input type="number" id="hourlyRate" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white" placeholder="e.g., 25">
                <label for="hoursPerWeek" class="block text-sm font-medium text-gray-300">Hours per Week</label>
                <input type="number" id="hoursPerWeek" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white" placeholder="e.g., 40">
            </div>
            <div>
                <label for="payFrequency" class="block text-sm font-medium text-gray-300">Pay Frequency</label>
                <select id="payFrequency" class="mt-1 block w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white">
                    <option value="weekly">Weekly</option>
                    <option value="biweekly">Biweekly</option>
                    <option value="semimonthly">Semi-monthly</option>
                    <option value="monthly">Monthly</option>
                </select>
            </div>
            <div>
                <label for="filingStatus" class="block text-sm font-medium text-gray-300">Filing Status</label>
                <select id="filingStatus" class="mt-1 block w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white">
                    <option value="single">Single</option>
                    <option value="married">MarriedFiling Jointly</option>
                    <option value="head">Head of Household</option>
                </select>
            </div>
            <div>
                <label for="state" class="block text-sm font-medium text-gray-300">State</label>
                <select id="state" class="mt-1 block w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white">
                    <option value="CA">California</option>
                    <option value="FL">Florida</option>
                    <option value="GA">Georgia</option>
                    <option value="NV">Nevada</option>
                    <option value="NY">New York</option>
                    <option value="OR">Oregon</option>
                    <option value="TX">Texas</option>
                    <option value="WA">Washington</option>
                </select>
            </div>
            <div>
                <label for="pretaxDeductions" class="block text-sm font-medium text-gray-300">Pre-Tax Deductions ($ per pay period)</label>
                <input type="number" id="pretaxDeductions" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white" placeholder="e.g., 100">
            </div>
            <button onclick="calculateNetPay()" class="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700">Calculate</button>
            <div id="result" class="mt-4 text-center hidden">
                <p class="text-lg font-semibold text-white">Estimated Net Pay</p>
                <p id="netPay" class="text-2xl font-bold text-white"></p>
                <p id="taxBreakdown" class="text-sm text-gray-400"></p>
            </div>
        </div>
        <p class="mt-4 text-xs text-gray-400 text-center">Note: This calculator provides estimates only. Consult a professional for accurate tax calculations.</p>
    </div>

    <script>
        // Map state names to their abbreviations
        const stateMap = {
            'California': 'CA',
            'Florida': 'FL',
            'Georgia': 'GA',
            'Nevada': 'NV',
            'New York': 'NY',
            'Oregon': 'OR',
            'Texas': 'TX',
            'Washington': 'WA'
        };

        // Function to set default state based on user's location
        function setDefaultState() {
            const stateSelect = document.getElementById('state');
            const errorDiv = document.getElementById('geolocationError');

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        const { latitude, longitude } = position.coords;
                        try {
                            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`);
                            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                            const data = await response.json();
                            const stateName = data.address.state;
                            const stateCode = stateMap[stateName];
                            if (stateCode) {
                                stateSelect.value = stateCode;
                            } else {
                                stateSelect.value = 'CA';
                                errorDiv.textContent = `State (${stateName}) not supported. Defaulting to California.`;
                                errorDiv.classList.remove('hidden');
                                setTimeout(() => errorDiv.classList.add('hidden'), 5000);
                            }
                        } catch (error) {
                            console.error('Geolocation fetch error:', error.message);
                            stateSelect.value = 'CA';
                            errorDiv.textContent = 'Unable to fetch location data. Defaulting to California.';
                            errorDiv.classList.remove('hidden');
                            setTimeout(() => errorDiv.classList.add('hidden'), 5000);
                        }
                    },
                    (error) => {
                        let errorMessage = 'Unable to detect location. Defaulting to California.';
                        switch (error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = 'Location access denied. Defaulting to California.';
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = 'Location unavailable. Defaulting to California.';
                                break;
                            case error.TIMEOUT:
                                errorMessage = 'Location request timed out. Defaulting to California.';
                                break;
                        }
                        console.error('Geolocation error:', errorMessage);
                        stateSelect.value = 'CA';
                        errorDiv.textContent = errorMessage;
                        errorDiv.classList.remove('hidden');
                        setTimeout(() => errorDiv.classList.add('hidden'), 5000);
                    }
                );
            } else {
                console.error('Geolocation error: Geolocation API not supported by browser.');
                stateSelect.value = 'CA';
                errorDiv.textContent = 'Geolocation not supported. Defaulting to California.';
                errorDiv.classList.remove('hidden');
                setTimeout(() => errorDiv.classList.add('hidden'), 5000);
            }
        }

        // Call setDefaultState when the page loads
        window.onload = setDefaultState;

        // Toggle between salary and hourly input fields
        document.getElementById('payType').addEventListener('change', function() {
            const salaryInput = document.getElementById('salaryInput');
            const hourlyInput = document.getElementById('hourlyInput');
            if (this.value === 'salary') {
                salaryInput.classList.remove('hidden');
                hourlyInput.classList.add('hidden');
            } else {
                salaryInput.classList.add('hidden');
                hourlyInput.classList.remove('hidden');
            }
        });

        function calculateNetPay() {
            const payType = document.getElementById('payType').value;
            const payFrequency = document.getElementById('payFrequency').value;
            const filingStatus = document.getElementById('filingStatus').value;
            const state = document.getElementById('state').value;
            const pretaxDeductions = parseFloat(document.getElementById('pretaxDeductions').value) || 0;

            let annualGrossPay = 0;
            if (payType === 'salary') {
                annualGrossPay = parseFloat(document.getElementById('grossPay').value) || 0;
            } else {
                const hourlyRate = parseFloat(document.getElementById('hourlyRate').value) || 0;
                const hoursPerWeek = parseFloat(document.getElementById('hoursPerWeek').value) || 0;
                annualGrossPay = hourlyRate * hoursPerWeek * 52;
            }

            // Pay periods per year
            const payPeriods = {
                weekly: 52,
                biweekly: 26,
                semimonthly: 24,
                monthly: 12
            };

            const grossPayPerPeriod = annualGrossPay / payPeriods[payFrequency];

            // Simplified tax rates (2025 estimates)
            const federalTaxRates = {
                single: [
                    { limit: 11000, rate: 0.10 },
                    { limit: 44725, rate: 0.12 },
                    { limit: 95375, rate: 0.22 },
                    { limit: 182100, rate: 0.24 },
                    { limit: 231250, rate: 0.32 },
                    { limit: 578125, rate: 0.35 },
                    { limit: Infinity, rate: 0.37 }
                ],
                married: [
                    { limit: 22000, rate: 0.10 },
                    { limit: 89450, rate: 0.12 },
                    { limit: 190750, rate: 0.22 },
                    { limit: 364200, rate: 0.24 },
                    { limit: 462500, rate: 0.32 },
                    { limit: 693750, rate: 0.35 },
                    { limit: Infinity, rate: 0.37 }
                ],
                head: [
                    { limit: 15700, rate: 0.10 },
                    { limit: 59850, rate: 0.12 },
                    { limit: 95350, rate: 0.22 },
                    { limit: 182100, rate: 0.24 },
                    { limit: 231250, rate: 0.32 },
                    { limit: 578100, rate: 0.35 },
                    { limit: Infinity, rate: 0.37 }
                ]
            };

            // Simplified state tax rates (example rates, not exhaustive)
            const stateTaxRates = {
                CA: 0.08, // Average effective rate
                NY: 0.06,
                TX: 0.0, // No state income tax
                FL: 0.0,
                WA: 0.0, // No state income tax
                NV: 0.0, // No state income tax
                OR: 0.07, // Average effective rate
                GA: 0.0575 // Average effective rate
            };

            // FICA taxes (2025 rates)
            const socialSecurityRate = 0.062;
            const socialSecurityLimit = 176100;
            const medicareRate = 0.0145;
            const additionalMedicareThreshold = 200000;
            const additionalMedicareRate = 0.009;

            // Calculate federal tax
            const taxableIncome = annualGrossPay - pretaxDeductions * payPeriods[payFrequency];
            let federalTax = 0;
            let remainingIncome = taxableIncome;
            for (const bracket of federalTaxRates[filingStatus]) {
                if (remainingIncome <= 0) break;
                const taxableInBracket = Math.min(remainingIncome, bracket.limit - (federalTax ? federalTaxRates[filingStatus][federalTaxRates[filingStatus].indexOf(bracket) - 1].limit : 0));
                federalTax += taxableInBracket * bracket.rate;
                remainingIncome -= taxableInBracket;
            }

            // Calculate FICA taxes
            const socialSecurityTax = Math.min(annualGrossPay, socialSecurityLimit) * socialSecurityRate;
            let medicareTax = annualGrossPay * medicareRate;
            if (annualGrossPay > additionalMedicareThreshold) {
                medicareTax += (annualGrossPay - additionalMedicareThreshold) * additionalMedicareRate;
            }

            // Calculate state tax
            const stateTax = taxableIncome * stateTaxRates[state];

            // Total taxes per period
            const totalTaxPerPeriod = (federalTax + socialSecurityTax + medicareTax + stateTax) / payPeriods[payFrequency];
            const netPayPerPeriod = grossPayPerPeriod - totalTaxPerPeriod - pretaxDeductions;

            // Display results
            const resultDiv = document.getElementById('result');
            const netPayElement = document.getElementById('netPay');
            const taxBreakdownElement = document.getElementById('taxBreakdown');

            netPayElement.textContent = `$${netPayPerPeriod.toFixed(2)} per ${payFrequency} pay period`;
            taxBreakdownElement.innerHTML = `
                Gross Pay: $${grossPayPerPeriod.toFixed(2)}<br>
                Federal Tax: $${(federalTax / payPeriods[payFrequency]).toFixed(2)}<br>
                Social Security: $${(socialSecurityTax / payPeriods[payFrequency]).toFixed(2)}<br>
                Medicare: $${(medicareTax / payPeriods[payFrequency]).toFixed(2)}<br>
                State Tax: $${(stateTax / payPeriods[payFrequency]).toFixed(2)}<br>
                Pre-Tax Deductions: $${pretaxDeductions.toFixed(2)}
            `;
            resultDiv.classList.remove('hidden');
        }
    </script>
</body>
</html>